.step(data-file='app/User.php', data-highlight='78-83')
  :markdown
    ## Sending a 2FA Token

    ![2FA Flow Chart Step 5](//s3.amazonaws.com/howtodocs/2fa-flow5.png)

    Once there is an Authy user ID associated with our user model, we can request that an SMS verification token be sent out to the user's phone. Authy supports token validation in their mobile app as well, so if our user has the app it will default to sending a push notification instead of an SMS.

    We can call this method on the user instance multiple times if needed, which is what happens every time the user clicks "Resend Code" on the web form we are about to look at!

.step(data-title="Validate the Code: Step 1", data-file='app/Http/Controllers/Auth/AuthController.php', data-highlight='62-78')
  :markdown
    ## Validating the Code on the Controller

    ![2FA Flow Chart Step 8](//s3.amazonaws.com/howtodocs/2fa-flow8.png)

    Back in our controller, we grab the 2nd-factor token that was submitted by the user. Before we decide what to do with this token we check to see if the User is part of a validated `Session`. Once we get the all clear we then check that token by calling `verifyToken()` on the User model. 

    This is a great opportunity to dive-in to the verifyToken() function.

.step(data-title="Validate the Code: Step 2", data-file='app/User.php', data-highlight='84-93')
  :markdown
    ## Validating the Code with Authy

    ![2FA Flow Chart Step 8](//s3.amazonaws.com/howtodocs/2fa-flow8.png)

    Authy makes it very simple for us to validate the code our user submitted. All we need to do is check with Authy that the code they sent was the same code they entered in our form. To do this our User model simply passes it's `authy_id` and the `$token` to Authy. 

    And voilah, we have a User who is valid over two-factors of authentication.

.step
  :markdown
    ## Where to next?

    That's it! We've just implemented two-factor auth using three different methods and the latest in Authy technology.

    If you're a PHP developer working with Twilio, you might want to
    check out these other tutorials.

    [**Call Tracking**](//www.twilio.com/docs/howto/walkthrough/call-tracking/php/laravel)

    Measure the effectiveness of different marketing campaigns with unique phone numbers.

    [**Server
    Notifications via SMS**](//www.twilio.com/docs/howto/walkthrough/server-notifications/php/laravel)

    Faster than e-mail and less likely to get blocked, text messages are great for timely alerts and notifications. Learn how to send out SMS (and MMS) notifications to a list of server administrators.

    ### Did this help?

    Thanks for checking out this tutorial! If you have any feedback
    to share with us, we'd love to hear it.
    [Contact support](//www.twilio.com/help/contact) to let us know what you think.
