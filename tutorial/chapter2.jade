.step(data-title='What Goes Into a Login System?', data-file='app/User.php', data-highlight='35-47')
  :markdown
    ## Registering a User with Authy

    When a new User is created we also register the User with Authy.

    All Authy needs to get a user set up for your application is the email,
    phone number and country code. In order to do two-factor authentication,
    we need to make sure we ask for these things at the point of sign up.

    Once we register the User with Authy we get an `id` back that we will
    store as the user's `authyId`. This is very important since it's how we
    will verify the identity of our User with Authy.

    ---

    **See Also:**
    * [Enabling a User with Authy](//docs.authy.com/#section-Enabling_two-
      factor_on_a_user)
    * [Getting started with Eloquent ORM](//laravel.com/docs/5.1/eloquent)

.step(data-file='app/Http/Controllers/Auth/AuthController.php', data-highlight='43-56')
  :markdown
    ## Logging in with Authy OneTouch

    When a User attempts to log in to our website, we will ask them for a second 
    form of identification. Let's take a look at Authy's OneTouch verification first. 

    ![Authy OneTouch Approval](//howtodocs.s3.amazonaws.com/onetouch-approved.gif)

    OneTouch works like so:
    * We attempt to send a User a _OneTouch Approval Request_
    * If the User has OneTouch enabled, we will get a `success` message back
    * The User hits 'Approve' in their Authy app
    * Authy makes a POST request to our app with an 'Approved' status
    * We log the User in

    In the next steps we'll look at how we handle cases where the User does not 
    have OneTouch, or denies the login request.

.step(data-file='app/User.php', data-highlight='49-76')
  :markdown
    ## Sending the OneTouch Request

    When our User logs in we immediately attempt to verify their identity with 
    OneTouch. We will fallback gracefully if they don't have a OneTouch device, 
    but we don't know until we try.

    Authy lets us pass details with our OneTouch request, including a message, 
    a logo and any other details we want to send. We could easily send any 
    number of details by appending `details['some_detail']`. You could imagine a 
    scenario where we send a OneTouch request to approve a money transfer:

    ```php
    $params = array(
      'message' => "Request to send money to Jarod's vault",
      'details[From]' => "Jarod",
      'details[Amount]' => "1,000,000",
      'details[Currency]' => "Galleons",
    )
    ```
    *Note: We need some way to check the status of the user's two-factor process, in this case we do so by updating the `$user->authy_status` attribute. It's important we reset this before we log the user in.*

    --- 

    **See Also:**
    * [Create Approval Requests with Authy](//docs.authy.com/new_doc/authy_onetouch_api#create-an-approval-request-to-be-sent-to-user)
    * [Getting Approval Request info](//docs.authy.com/new_doc/authy_onetouch_api#getting-approval-request-info)

.step(data-file='app/Http/Controllers/Auth/AuthyController.php', data-highlight='31-42')
  :markdown
    ## Configuring the OneTouch callback

    In order for our app to know what the User did after we sent the OneTouch 
    request, we need to register a callback endpoint with Authy.

    ![Authy OneTouch Callback](//howtodocs.s3.amazonaws.com/onetouch-callback-endpoint.png)

    Here in our callback, we look up the user using the `authy_id` sent with the Authy POST request. Ideally at this point we would probably use a websocket to let our client know that we received a response from Authy. However for this version we're going to keep it simple and just update the `authy_status` on the User. Then all our client-side code needs to do is check for the user status as 'Approved' before logging her in.

    Let's take a look at the client-side code that will be handling this.

.step(data-file='public/js/sessions.js')
  :markdown
    ## Handling Two-Factor Asyncronously

    In order for two-factor authentication to be seamless, it is best done 
    asynchronously so that the user doesn't even know it's happening.

    We've already taken a look at what's happening on the server side, so let's 
    step in front of the cameras now and see how our JavaScript is interacting 
    with those server endpoints.

    First we hijack the login form submit and pass the data to our `sessions/create` 
    controller using Ajax. Depending on how that endpoint responds we will 
    either ask the User for token or await their OneTouch response.

    If we expect a OneTouch response, we will begin polling `/authy/status` until 
    we either see OneTouch login was either approved or denied. Let's take a 
    look at this controller and see what is happening.

    --- 

    **See Also:**
    * [jQuery Post method](//api.jquery.com/jquery.post/)
    * [Bootstrap modals](//getbootstrap.com/javascript/#modals)

.step(data-file='app/Http/Controllers/Auth/AuthyController.php', data-highlight='21-29')
  :markdown
    ## Falling back to Token

    Here is the endpoint that our javascript is polling. It is waiting for the 
    user status to be either 'Approved' or 'Denied'. If the User has approved 
    the OneTouch request, will log them in using Laravel's built in `Auth` functionality.

    If the request was denied we will ask the User to log in with a Token.
    
    --- 

    **See Also:**
    * [Laravel: JSON Responses](//laravel.com/docs/5.1/responses#json-responses)
